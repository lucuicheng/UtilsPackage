/**
 * 用户添加{{alias}}
 * @param query
 */
static {{name}}Single(body: any | null) {
    return new Promise((resolve, reject) => {
        const {createTime, ...param} = body;
        {{name|title}}
            .create({...param, createTime: new Date()})
            .then((doc: {{name|title}}ExtraDoc) => {
                resolve(doc);
            })
            .catch((err) => {
                handleError(err, reject);
            });
    });
}

/**
 * 用户查询{{alias}}
 * @param query
 */
static {{name}}History(uid, body: any | null) {
    return new Promise((resolve, reject) => {
        const {pageSize = 5, page, status, ...param} = body;
        const _pageSize = parseInt(pageSize > 0 ? pageSize : 5), _page = parseInt(page > 0 ? page : 0);
        {{name|title}}
            .find({creator: uid, status: {$ne: -1}, ...param})
            .limit(_pageSize)
            .skip(_pageSize * _page)
            .sort({createTime: -1})
            .then((doc: {{name|title}}ExtraDoc) => {
                resolve(doc);
            })
            .catch((err) => {
                handleError(err, reject);
            });
    });
}

/**
 * 用户更新{{alias}}
 * @param query
 */
static updateSingle{{name|title}}Record(uid, body: any | null) {
    return new Promise((resolve, reject) => {
        const {_id, creator, updateTime, ...param} = body;
        {{name|title}}
            .findByIdAndUpdate(_id, {...param, updateTime: new Date()}, {new: true})
            .then((doc: {{name|title}}ExtraDoc) => {
                if (uid != doc.creator) new Error('auth');
                resolve(doc);
            })
            .catch((err) => {
                handleError(err, reject);
            });
    });
}

/**
 * 用户删除{{alias}}
 * @param query
 */
static deleteSingle{{name|title}}Record(uid, body: any | null) {
    return new Promise((resolve, reject) => {
        const {_id, creator, updateTime, ...param} = body;
        console.log(_id);
        {{name|title}}
            .findByIdAndUpdate(_id, {status: -1, updateTime: new Date()}, {new: true})
            .then((doc: {{name|title}}ExtraDoc) => {
                if (uid != doc.creator) new Error('auth');
                resolve(doc);
            })
            .catch((err) => {
                handleError(err, reject);
            });
    });
}